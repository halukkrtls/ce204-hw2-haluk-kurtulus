// Code generated by Umple 1.31.1.5860.78bb27cc6

digraph "Treatment" {
  rankdir="BT"
  node [ratio="auto" shape=record margin=0; href="javascript:Action.selectClass(&quot;\N&quot;);"];

  // Class: Hospital
  "Hospital" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Hospital    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String address&#13;">  address : String  </td></tr><tr><td align="left" href="" title="String phone&#13;">  phone : String  </td></tr></table>>,
   tooltip="class Hospital
"];

  // Class: Team
  "Team" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Team    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr></table>>,
   tooltip="class Team
"];

  // Class: Ward
  "Ward" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Ward    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String patientsGender&#13;">  patientsGender : String  </td></tr><tr><td align="left" href="" title="Integer capacity&#13;">  capacity : Integer  </td></tr></table>>,
   tooltip="class Ward
"];

  // Class: Doctor
  "Doctor" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Doctor    </td></tr><hr/><tr><td align="left" href="" title="String specialty&#13;">  specialty : String  </td></tr><tr><td align="left" href="" title="String locations&#13;">  locations : String  </td></tr></table>>,
   tooltip="class Doctor
"];

  // Class: Patient
  "Patient" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Patient    </td></tr><hr/><tr><td align="left" href="" title="String id&#13;">  id : String  </td></tr><tr><td align="left" href="" title="String gender&#13;">  gender : String  </td></tr><tr><td align="left" href="" title="Integer age&#13;">  age : Integer  </td></tr><tr><td align="left" href="" title="String accepted&#13;">  accepted : String  </td></tr><tr><td align="left" href="" title="String sickness&#13;">  sickness : String  </td></tr><tr><td align="left" href="" title="String prescriptions&#13;">  prescriptions : String  </td></tr><tr><td align="left" href="" title="String allergies&#13;">  allergies : String  </td></tr><tr><td align="left" href="" title="String specialReqs&#13;">  specialReqs : String  </td></tr></table>>,
   tooltip="class Patient
"];

  // Class: ConsultantDoctor
  "ConsultantDoctor" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    ConsultantDoctor    </td></tr></table>>,
   tooltip="class ConsultantDoctor
"];
  "ConsultantDoctor" -> "Doctor" [arrowhead="empty"; samehead="gen"];


  // Class: JuniorDoctor
  "JuniorDoctor" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    JuniorDoctor    </td></tr></table>>,
   tooltip="class JuniorDoctor
"];
  "JuniorDoctor" -> "Doctor" [arrowhead="empty"; samehead="gen"];


  // Class: Gender
  "Gender" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Gender    </td></tr></table>>,
   tooltip="class Gender
"];

  // All associations
  "Hospital" -> "Ward" [dir="back", arrowtail="diamond", taillabel="1 ", headlabel="* ", tooltip="Hospital 1  <@>- *  Ward

A Ward has A Hospital. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Hospital.

A Hospital has some Wards. It can have none, and there is no upper bound defined.

This is a composition. A Ward is part of a Hospital. When any Hospital is destroyed its parts are destroyed too.
" headtooltip="Hospital 1  <@>- *  Ward

A Ward has A Hospital. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Hospital.

A Hospital has some Wards. It can have none, and there is no upper bound defined.

This is a composition. A Ward is part of a Hospital. When any Hospital is destroyed its parts are destroyed too.
" tailtooltip="Hospital 1  <@>- *  Ward

A Ward has A Hospital. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Hospital.

A Hospital has some Wards. It can have none, and there is no upper bound defined.

This is a composition. A Ward is part of a Hospital. When any Hospital is destroyed its parts are destroyed too.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Hospital" -> "Team" [dir="back", arrowtail="diamond", taillabel="1 ", headlabel="1..* ", tooltip="Hospital 1  <@>- 1..*  Team

A Team has A Hospital. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Hospital.

A Hospital has at least 1 Team and can never have none. And there is no upper bound defined.

This is a composition. A Team is part of a Hospital. When any Hospital is destroyed its parts are destroyed too.
" headtooltip="Hospital 1  <@>- 1..*  Team

A Team has A Hospital. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Hospital.

A Hospital has at least 1 Team and can never have none. And there is no upper bound defined.

This is a composition. A Team is part of a Hospital. When any Hospital is destroyed its parts are destroyed too.
" tailtooltip="Hospital 1  <@>- 1..*  Team

A Team has A Hospital. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Hospital.

A Hospital has at least 1 Team and can never have none. And there is no upper bound defined.

This is a composition. A Team is part of a Hospital. When any Hospital is destroyed its parts are destroyed too.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Team" -> "Doctor" [dir="back", arrowtail="diamond", taillabel="0..1 ", headlabel="* ", tooltip="Team 0..1  <@>- *  Doctor

A Doctor may have a Team. It can have none or just 1. 

A Team has some Doctors. It can have none, and there is no upper bound defined.

This is a composition. A Doctor is part of a Team. When any Team is destroyed its parts are destroyed too.
" headtooltip="Team 0..1  <@>- *  Doctor

A Doctor may have a Team. It can have none or just 1. 

A Team has some Doctors. It can have none, and there is no upper bound defined.

This is a composition. A Doctor is part of a Team. When any Team is destroyed its parts are destroyed too.
" tailtooltip="Team 0..1  <@>- *  Doctor

A Doctor may have a Team. It can have none or just 1. 

A Team has some Doctors. It can have none, and there is no upper bound defined.

This is a composition. A Doctor is part of a Team. When any Team is destroyed its parts are destroyed too.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Doctor" -> "Patient" [dir="none", taillabel="* ", headlabel="* ", tooltip="Doctor *  -- *  Patient

A Patient has some Doctors. It can have none, and there is no upper bound defined.

A Doctor has some Patients. It can have none, and there is no upper bound defined.

" headtooltip="Doctor *  -- *  Patient

A Patient has some Doctors. It can have none, and there is no upper bound defined.

A Doctor has some Patients. It can have none, and there is no upper bound defined.

" tailtooltip="Doctor *  -- *  Patient

A Patient has some Doctors. It can have none, and there is no upper bound defined.

A Doctor has some Patients. It can have none, and there is no upper bound defined.

" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Patient" -> "Team" [dir="none", taillabel="* ", headlabel="1 ", tooltip="Patient *  -- 1  Team

A Team has some Patients. It can have none, and there is no upper bound defined.

A Patient has A Team. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Team.

When a Patient is created, its Team must be assigned.
When a Patient is deleted, its Team is not deleted and its list of Patients is decreased.
When a Team is deleted, its Patients are not deleted. They are assigned to another Team.
" headtooltip="Patient *  -- 1  Team

A Team has some Patients. It can have none, and there is no upper bound defined.

A Patient has A Team. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Team.

When a Patient is created, its Team must be assigned.
When a Patient is deleted, its Team is not deleted and its list of Patients is decreased.
When a Team is deleted, its Patients are not deleted. They are assigned to another Team.
" tailtooltip="Patient *  -- 1  Team

A Team has some Patients. It can have none, and there is no upper bound defined.

A Patient has A Team. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Team.

When a Patient is created, its Team must be assigned.
When a Patient is deleted, its Team is not deleted and its list of Patients is decreased.
When a Team is deleted, its Patients are not deleted. They are assigned to another Team.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Patient" -> "Ward" [dir="none", taillabel="* ", headlabel="1 ", tooltip="Patient *  -- 1  Ward

A Ward has some Patients. It can have none, and there is no upper bound defined.

A Patient has A Ward. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Ward.

When a Patient is created, its Ward must be assigned.
When a Patient is deleted, its Ward is not deleted and its list of Patients is decreased.
When a Ward is deleted, its Patients are not deleted. They are assigned to another Ward.
" headtooltip="Patient *  -- 1  Ward

A Ward has some Patients. It can have none, and there is no upper bound defined.

A Patient has A Ward. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Ward.

When a Patient is created, its Ward must be assigned.
When a Patient is deleted, its Ward is not deleted and its list of Patients is decreased.
When a Ward is deleted, its Patients are not deleted. They are assigned to another Ward.
" tailtooltip="Patient *  -- 1  Ward

A Ward has some Patients. It can have none, and there is no upper bound defined.

A Patient has A Ward. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Ward.

When a Patient is created, its Ward must be assigned.
When a Patient is deleted, its Ward is not deleted and its list of Patients is decreased.
When a Ward is deleted, its Patients are not deleted. They are assigned to another Ward.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "ConsultantDoctor" -> "Team" [dir="none", taillabel="1 ", headlabel="0..1 ", tooltip="ConsultantDoctor 1  -- 0..1  Team

A Team has A ConsultantDoctor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConsultantDoctor.

A ConsultantDoctor may have a Team. It can have none or just 1. 

" headtooltip="ConsultantDoctor 1  -- 0..1  Team

A Team has A ConsultantDoctor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConsultantDoctor.

A ConsultantDoctor may have a Team. It can have none or just 1. 

" tailtooltip="ConsultantDoctor 1  -- 0..1  Team

A Team has A ConsultantDoctor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConsultantDoctor.

A ConsultantDoctor may have a Team. It can have none or just 1. 

" tailurl="javascript:void()" headurl="javascript:void()" ];
  "ConsultantDoctor" -> "Patient" [dir="none", taillabel="1 ", headlabel="* ", tooltip="ConsultantDoctor 1  -- *  Patient

A Patient has A ConsultantDoctor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConsultantDoctor.

A ConsultantDoctor has some Patients. It can have none, and there is no upper bound defined.

When a Patient is created, its ConsultantDoctor must be assigned.
When a Patient is deleted, its ConsultantDoctor is not deleted and its list of Patients is decreased.
When a ConsultantDoctor is deleted, its Patients are not deleted. They are assigned to another ConsultantDoctor.
" headtooltip="ConsultantDoctor 1  -- *  Patient

A Patient has A ConsultantDoctor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConsultantDoctor.

A ConsultantDoctor has some Patients. It can have none, and there is no upper bound defined.

When a Patient is created, its ConsultantDoctor must be assigned.
When a Patient is deleted, its ConsultantDoctor is not deleted and its list of Patients is decreased.
When a ConsultantDoctor is deleted, its Patients are not deleted. They are assigned to another ConsultantDoctor.
" tailtooltip="ConsultantDoctor 1  -- *  Patient

A Patient has A ConsultantDoctor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConsultantDoctor.

A ConsultantDoctor has some Patients. It can have none, and there is no upper bound defined.

When a Patient is created, its ConsultantDoctor must be assigned.
When a Patient is deleted, its ConsultantDoctor is not deleted and its list of Patients is decreased.
When a ConsultantDoctor is deleted, its Patients are not deleted. They are assigned to another ConsultantDoctor.
" tailurl="javascript:void()" headurl="javascript:void()" ];
}
